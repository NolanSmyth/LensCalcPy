# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_pbh.ipynb.

# %% auto 0
__all__ = ['Pbh']

# %% ../nbs/00_pbh.ipynb 3
from .parameters import *
from .utils import *

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import nquad

# %% ../nbs/00_pbh.ipynb 5
class Pbh:
    """A class to represent a PBH population"""

    def __init__(self,
                m_pbh: float, # PBH mass in solar masses
                f_dm: float # PBH fraction of the DM density
                ):
        """
        Initialize the PBH population
        """
        self.m_pbh = m_pbh
        if f_dm < 0 or f_dm > 1:
            raise ValueError("f_dm must be between 0 and 1")
        self.f_dm = f_dm
    
    def __str__(self) -> str:
        return f"PBH population with m_pbh={self.m_pbh} and f_dm={self.f_dm}"
    __repr__ = __str__

    def density(self, r: float) -> float:
        return density_nfw(r) * self.f_dm

    def differential_rate_integrand(self, umin, d, t):
        r = dist_mw(d)
        return (1 / (ut**2 - umin**2)**0.5 *
                self.density(r) / (self.m_pbh * velocity_dispersion(d)**2) *
                velocity_radial(d, self.m_pbh, umin, t * htosec)**4 * (htosec / kpctokm)**2 *
                np.exp(-(velocity_radial(d, self.m_pbh, umin, t * htosec)**2 / velocity_dispersion(d)**2)))
    
    def differential_rate(self, t):
        umin_bounds = [0, ut]
        d_bounds = [0, rEarth]

        result, error = nquad(self.differential_rate_integrand, [umin_bounds, d_bounds], args=[t])

        return result
    
    
